// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package adminmodel

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Connection interface {
	IsConnection()
}

type Edge interface {
	IsEdge()
}

// Common
type Node interface {
	IsNode()
}

type Article struct {
	ID             string    `json:"id"`
	Title          string    `json:"title"`
	Body           string    `json:"body"`
	Description    string    `json:"description"`
	PublishStatus  int       `json:"publishStatus"`
	ThumbnailImage string    `json:"thumbnailImage"`
	PostedAt       time.Time `json:"postedAt"`
	CreatedAt      time.Time `json:"createdAt"`
	UpdatedAt      time.Time `json:"updatedAt"`
}

func (Article) IsNode() {}

type ArticleConnection struct {
	PageInfo *PageInfo      `json:"pageInfo"`
	Edges    []*ArticleEdge `json:"edges"`
	Nodes    []*Article     `json:"nodes"`
}

func (ArticleConnection) IsConnection() {}

type ArticleEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Article `json:"node"`
}

func (ArticleEdge) IsEdge() {}

type ArticleMutationInput struct {
	Title          string    `json:"title"`
	Body           string    `json:"body"`
	Description    string    `json:"description"`
	PublishStatus  int       `json:"publishStatus"`
	ThumbnailImage string    `json:"thumbnailImage"`
	PostedAt       time.Time `json:"postedAt"`
}

type PageInfo struct {
	Page             int  `json:"page"`
	PaginationLength int  `json:"paginationLength"`
	HasNextPage      bool `json:"hasNextPage"`
	HasPreviousPage  bool `json:"hasPreviousPage"`
	Count            int  `json:"count"`
	TotalCount       int  `json:"totalCount"`
	Limit            int  `json:"limit"`
	Offset           int  `json:"offset"`
}

type Pagination struct {
	Limit  *int `json:"limit"`
	Offset *int `json:"offset"`
}

type SortOrder struct {
	Sort  string `json:"sort"`
	Order *Order `json:"order"`
}

type Order string

const (
	OrderAsc  Order = "ASC"
	OrderDesc Order = "DESC"
)

var AllOrder = []Order{
	OrderAsc,
	OrderDesc,
}

func (e Order) IsValid() bool {
	switch e {
	case OrderAsc, OrderDesc:
		return true
	}
	return false
}

func (e Order) String() string {
	return string(e)
}

func (e *Order) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Order(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Order", str)
	}
	return nil
}

func (e Order) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

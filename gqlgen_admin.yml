# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
    - graph-schema/common.graphql
    - graph-schema/admin.graphql

# Where should the generated server code go?
exec:
    filename: resolver/adminresolver/generated.go
    package: adminresolver

#federation:
#   filename: domain/gqlmodel/federation.go
#   package: gqlmodel

# Where should any generated models go?
model:
    filename: domain/gql/adminmodel/models_gen.go
    package: adminmodel

# Where should the resolver implementations go?
resolver:
    layout: follow-schema
    dir: resolver/adminresolver
    package: adminresolver

# Optional: turn on use `gqlgen:"fieldName"` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
    - "github.com/hiroyky/nikki_backend/domain/gql/adminmodel"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
    ID:
        model:
            - github.com/99designs/gqlgen/graphql.ID
            - github.com/99designs/gqlgen/graphql.Int
            - github.com/99designs/gqlgen/graphql.Int64
            - github.com/99designs/gqlgen/graphql.Int32
    Int:
        model:
            - github.com/99designs/gqlgen/graphql.Int
            - github.com/99designs/gqlgen/graphql.Int64
            - github.com/99designs/gqlgen/graphql.Int32
